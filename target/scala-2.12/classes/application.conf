akka {
  logLevel = "DEBUG"
  log-dead-letters = off
  log-dead-letters-during-shotdown = off

  http {
    server {
      remote-address-header = on
      transparent-head-requests = off
      verbose-error-messages = off
    }
    parsing {
      error-logging-verbosity = simple
    }
  }
}

custom-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 32
  }
  throughput = 1
}

kamon {
  # Kamon App-level settings.
  environment.service = "App"
  modules.status-page.enabled = true
  trace.join-remote-parents-with-same-span-id = on
}

kanela {
  # Hide Kanela's ASCII logo in the logs on startup.
  show-banner = false
  log-level = "ERROR"
}

kamon.zipkin {
  # The kamon-zipkin module translates Kamon’s representation of Spans and sends them to
  # Zipkin’s v2 API at the specified host and port.
  host = "localhost"
  port = 9411
  protocol = "http"
}

kamon.propagation.http.default.tags {
  mappings {
    # Kamon will automatically try to turn the contents of the X-Request-ID HTTP header on
    # incoming requests into the requestID Context tag and also write the value of the
    # requestID Context tag (if present) on the X-Request-ID HTTP header for outgoing requests.
    requestID = "X-Request-ID"
  }
}

kamon.instrumentation.akka.http {
  # The Akka HTTP instrumentation automatically enables Context propagation and distributed
  # tracing for both incoming and outgoing requests processed with Akka HTTP, as well as
  # lower level HTTP server metrics.
  server {
    metrics {
      enabled = yes
    }
    tracing {
      enabled = yes
      span-metrics = on
      tags {
        url = span
        method = metric
        status-code = metric

        from-context {
          requestID = span
        }
      }
    }
    propagation {
      enabled = yes
      channel = default
    }
  }

  client {
    tracing {
      enabled = yes
      span-metrics = on
      tags {
        url = span
        method = metric
        status-code = metric

        from-context {
          requestID = span
        }
      }
    }
    propagation {
      enabled = yes
      channel = default
    }
  }
}